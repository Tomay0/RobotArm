private class OpenButtonListener implements ActionListener{
        public void actionPerformed(ActionEvent event){

            JFileChooser openFileChooser = new JFileChooser();
            openFileChooser.setCurrentDirectory(new File(System.getProperty("user.dir")));
            int status = openFileChooser.showOpenDialog(null); //Prompting user to open a file
            /*Checks if a file was selected*/
            if(status != openFileChooser.APPROVE_OPTION){
                textOutputArea.append("No file selected\n");

            }else{
                //Open
                File file = openFileChooser.getSelectedFile();
                currentImage = new ImageProcess(file); //Processing the opened image
                if(currentImage.getDrawing()==null) {//check open of the image was ok
                    currentImage = null;
                    textOutputArea.append("Unable to read image data from the file you picked.\n");
                }else{
                    //Load successful
                    drawing = currentImage.getDrawing();
                    textOutputArea.append("loaded file: " + file.getName() + "\n");

                    /*Getting image to display onto menuPanel*/
                    menuPanel.removeAll(); //Clears the panel of the image
                    BufferedImage openedImg = currentImage.getOriginalImg();
                    /* Potential scaling stuff
                    int scaleX = MENU_PANEL_WIDTH/openedImg.getWidth();
                    int scaleY = MENU_PANEL_HEIGHT/openedImg.getHeight();
                    int newWidth = openedImg.getWidth() * scaleX;
                    System.out.println(newWidth);
                    int newHeight = openedImg.getHeight() * scaleY;
                    System.out.println(newHeight);
                    JLabel pic = new JLabel(new ImageIcon(openedImg.getScaledInstance(newWidth, newHeight, Image.SCALE_FAST)));
                    */
                    JLabel pic = new JLabel(new ImageIcon(openedImg.getScaledInstance(MENU_PANEL_WIDTH - 10, 200, Image.SCALE_FAST))); //Temporary forced scaling

                    /*Setting the orientation of the label below the icon*/
                    pic.setHorizontalTextPosition(JLabel.CENTER);
                    pic.setVerticalTextPosition(JLabel.BOTTOM);
                    pic.setText("happiness is a joke"); //Label

                    menuPanel.add(pic);
                    menuPanel.updateUI(); //Reshowing panel components
                    revalidate();
                }
            }
        }
    }

    /**
     * Save a drawing
     */
    private class SaveButtonListener implements ActionListener{
        public void actionPerformed(ActionEvent event){
            if(currentImage==null) {
                textOutputArea.append("you haven't opened an image.\n");
            }
            JFileChooser saveFileChooser = new JFileChooser();
            saveFileChooser.setCurrentDirectory(new File(System.getProperty("user.dir")));
            int status = saveFileChooser.showSaveDialog(null); //Prompting user to open a file
            if(status != saveFileChooser.APPROVE_OPTION){
                textOutputArea.append("No file selected\n");
            }else{
                //Save
                File f = saveFileChooser.getSelectedFile();
                if(!currentImage.save(f)) {
                    textOutputArea.append("Could not save\n");
                }
            }
        }
    }

    /**
     * Save a drawing (TEST)
     */
    private class SaveTestButtonListener implements ActionListener{
        public void actionPerformed(ActionEvent event){
            if(currentImage == null){
                textOutputArea.append("You have not opened an image\n");
            }
            JFileChooser saveTestFileChooser = new JFileChooser();
            saveTestFileChooser.setCurrentDirectory(new File(System.getProperty("user.dir")));
            int status = saveTestFileChooser.showSaveDialog(null);
            if(status != saveTestFileChooser.APPROVE_OPTION){
                textOutputArea.append("Save cancelled\n");
            }else{
                //Save
                File f = saveTestFileChooser.getSelectedFile();
                if(!currentImage.saveTest(f)){
                    textOutputArea.append("Could not save test file\n");
                }
            }
        }
    }

    /*For the sensitive eyes :) (This was not a waste of time)*/
    private class DarkThemeButtonListener implements ActionListener{
        public void actionPerformed(ActionEvent event){

            for(JPanel panel : panelSet) {
                panel.setBackground(Color.black);
                TitledBorder newBorder = (TitledBorder) panel.getBorder();//panel.getBorder() returns Border type - need to cast to TitledBorder type
                newBorder.setTitleColor(Color.white);
                panel.setBorder(newBorder);
            }

            /*Changing the color of the text area*/
            textOutputArea.setBackground(Color.black);
            TitledBorder newTextAreaBorder = (TitledBorder) textOutputArea.getBorder();
            newTextAreaBorder.setTitleColor(Color.white);
            textOutputArea.setBorder(newTextAreaBorder);
            textOutputArea.setForeground(Color.white); //Changes text color

        }
    }
    /*(This was not a waste of time)*/
    private class LightThemeButtonListener implements ActionListener{
        public void actionPerformed(ActionEvent event){
            for(JPanel panel : panelSet){
                panel.setBackground(Color.white);

                /*Turning border title color white*/
                TitledBorder newBorder = (TitledBorder) panel.getBorder(); //panel.getBorder() returns Border type - need to cast to TitledBorder type
                newBorder.setTitleColor(Color.black);
                panel.setBorder(newBorder);

            }

            /*Changing the color of the text area*/
            textOutputArea.setBackground(Color.white);
            TitledBorder newTextAreaBorder = (TitledBorder) textOutputArea.getBorder();
            newTextAreaBorder.setTitleColor(Color.black);
            textOutputArea.setBorder(newTextAreaBorder);
            textOutputArea.setForeground(Color.black); //Changes text color
        }
    }

    private class RunSimListener implements ActionListener{
        public void actionPerformed(ActionEvent event){
            if(currentImage == null){
                textOutputArea.append("Can not run simulation: no image has been opened\n");
            }else{
                simulation = new Simulation(drawing);
            }
        }
    }